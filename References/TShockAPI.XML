<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TShockAPI</name>
    </assembly>
    <members>
        <member name="F:TShockAPI.DB.RegionManager.Regions">
            <summary>
            The list of regions.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.RegionManager.Reload">
            <summary>
            Reloads all regions.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.RegionManager.AddRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds a region to the database.
            </summary>
            <param name="tx">TileX of the top left corner.</param>
            <param name="ty">TileY of the top left corner.</param>
            <param name="width">Width of the region in tiles.</param>
            <param name="height">Height of the region in tiles.</param>
            <param name="regionname">The name of the region.</param>
            <param name="owner">The User Account Name of the person who created this region.</param>
            <param name="worldid">The world id that this region is in.</param>
            <param name="z">The Z index of the region.</param>
            <returns>Whether the region was created and added successfully.</returns>
        </member>
        <member name="M:TShockAPI.DB.RegionManager.DeleteRegion(System.String)">
            <summary>
            Deletes the region from this world with a given name.
            </summary>
            <param name="name">The name of the region to delete.</param>
            <returns>Whether the region was successfully deleted.</returns>
        </member>
        <member name="M:TShockAPI.DB.RegionManager.PositionRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position of a region.
            </summary>
            <param name="regionName">The region name.</param>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="M:TShockAPI.DB.RegionManager.ListAllRegions(System.String)">
            <summary>
            Gets all the regions names from world
            </summary>
            <param name="worldid">World name to get regions from</param>
            <returns>List of regions with only their names</returns>
        </member>
        <member name="T:TShockAPI.ILog">
            <summary>
            Logging interface
            </summary>
        </member>
        <member name="M:TShockAPI.ILog.MayWriteType(System.Diagnostics.TraceLevel)">
            <summary>
            Checks whether the log level contains the specified flag.
            </summary>
            <param name="type">The <see cref="T:System.Diagnostics.TraceLevel"/> value to check.</param>
        </member>
        <member name="M:TShockAPI.ILog.ConsoleInfo(System.String)">
            <summary>
            Writes an informative string to the log and to the console.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.ConsoleInfo(System.String,System.Object[])">
            <summary>
            Writes an informative string to the log and to the console.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.ConsoleError(System.String)">
            <summary>
            Writes an error message to the log and to the console.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.ConsoleError(System.String,System.Object[])">
            <summary>
            Writes an error message to the log and to the console.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.Warn(System.String)">
            <summary>
            Writes a warning to the log.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.Warn(System.String,System.Object[])">
            <summary>
            Writes a warning to the log.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.Error(System.String)">
            <summary>
            Writes an error to the log.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.Error(System.String,System.Object[])">
            <summary>
            Writes an error to the log.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.Info(System.String)">
            <summary>
            Writes an informative string to the log.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.Info(System.String,System.Object[])">
            <summary>
            Writes an informative string to the log.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.Data(System.String)">
            <summary>
            Writes data to the log.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.Data(System.String,System.Object[])">
            <summary>
            Writes data to the log.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.Write(System.String,System.Diagnostics.TraceLevel)">
            <summary>
            Writes a message to the log
            </summary>
            <param name="message">Message to write</param>
            <param name="level">LogLevel assosciated with the message</param>
        </member>
        <member name="M:TShockAPI.ILog.Debug(System.String)">
            <summary>
            Writes a debug string to the log file. Only works if the DEBUG preprocessor conditional is set.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.ILog.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug string to the log file. Only works if the DEBUG preprocessor conditional is set.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.ILog.Dispose">
            <summary>
            Dispose the Log
            </summary>
        </member>
        <member name="P:TShockAPI.ILog.FileName">
            <summary>
            Log file name
            </summary>
        </member>
        <member name="T:TShockAPI.SqlLog">
            <summary>
            Class inheriting ILog for writing logs to TShock's SQL database
            </summary>
        </member>
        <member name="M:TShockAPI.SqlLog.#ctor(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Sets the database connection and the initial log level.
            </summary>
            <param name="db">Database connection</param>
            <param name="textlogFilepath">File path to a backup text log in case the SQL log fails</param>
            <param name="clearTextLog"></param>
        </member>
        <member name="M:TShockAPI.SqlLog.Data(System.String)">
            <summary>
            Writes data to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Data(System.String,System.Object[])">
            <summary>
            Writes data to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Error(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Error(System.String,System.Object[])">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.ConsoleError(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.ConsoleError(System.String,System.Object[])">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Warn(System.String)">
            <summary>
            Writes a warning to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Warn(System.String,System.Object[])">
            <summary>
            Writes a warning to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Info(System.String)">
            <summary>
            Writes an informative string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Info(System.String,System.Object[])">
            <summary>
            Writes an informative string to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.ConsoleInfo(System.String)">
            <summary>
            Writes an informative string to the log file. Also outputs to the console.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.ConsoleInfo(System.String,System.Object[])">
            <summary>
            Writes an informative string to the log file. Also outputs to the console.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Debug(System.String)">
            <summary>
            Writes a debug string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.SqlLog.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug string to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="T:TShockAPI.TextLog">
            <summary>
            Class inheriting ILog for writing logs to a text file
            </summary>
        </member>
        <member name="M:TShockAPI.TextLog.#ctor(System.String,System.Boolean)">
            <summary>
            Creates the log file stream and sets the initial log level.
            </summary>
            <param name="filename">The output filename. This file will be overwritten if 'clear' is set.</param>
            <param name="clear">Whether or not to clear the log file on initialization.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Data(System.String)">
            <summary>
            Writes data to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Data(System.String,System.Object[])">
            <summary>
            Writes data to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Error(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Error(System.String,System.Object[])">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.ConsoleError(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.ConsoleError(System.String,System.Object[])">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Warn(System.String)">
            <summary>
            Writes a warning to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Warn(System.String,System.Object[])">
            <summary>
            Writes a warning to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Info(System.String)">
            <summary>
            Writes an informative string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Info(System.String,System.Object[])">
            <summary>
            Writes an informative string to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.ConsoleInfo(System.String)">
            <summary>
            Writes an informative string to the log file. Also outputs to the console.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.ConsoleInfo(System.String,System.Object[])">
            <summary>
            Writes an informative string to the log file. Also outputs to the console.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Debug(System.String)">
            <summary>
            Writes a debug string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug string to the log file.
            </summary>
            <param name="format">The format of the message to be written.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:TShockAPI.TextLog.Write(System.String,System.Diagnostics.TraceLevel)">
            <summary>
            Writes a message to the log
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="P:TShockAPI.TextLog.FileName">
            <summary>
            File name of the Text log
            </summary>
        </member>
        <member name="T:TShockAPI.PaginationTools">
            <summary>
            Provides tools for sending paginated output.
            </summary>
        </member>
        <member name="M:TShockAPI.SaveManager.OnSaveWorld(TerrariaApi.Server.WorldSaveEventArgs)">
            <summary>
            SaveWorld event handler which notifies users that the server may lag
            </summary>
        </member>
        <member name="M:TShockAPI.SaveManager.SaveWorld(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Saves the map data
            </summary>
            <param name="wait">wait for all pending saves to finish (default: true)</param>
            <param name="resetTime">reset the last save time counter (default: false)</param>
            <param name="direct">use the realsaveWorld method instead of saveWorld event (default: false)</param>
        </member>
        <member name="M:TShockAPI.SaveManager.Dispose">
            <summary>
            Processes any outstanding saves, shutsdown the save thread and returns
            </summary>
        </member>
        <member name="M:TShockAPI.DB.BanManager.GetBanByIp(System.String)">
            <summary>
            Gets a ban by IP.
            </summary>
            <param name="ip">The IP.</param>
            <returns>The ban.</returns>
        </member>
        <member name="M:TShockAPI.DB.BanManager.GetBans">
            <summary>
            Gets a list of bans.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.BanManager.GetBanByName(System.String,System.Boolean)">
            <summary>
            Gets a ban by name.
            </summary>
            <param name="name">The name.</param>
            <param name="casesensitive">Whether to check with case sensitivity.</param>
            <returns>The ban.</returns>
        </member>
        <member name="M:TShockAPI.DB.BanManager.GetBanByUUID(System.String)">
            <summary>
            Gets a ban by UUID.
            </summary>
            <param name="uuid">The UUID.</param>
            <returns>The ban.</returns>
        </member>
        <member name="M:TShockAPI.DB.GenericQueryCreator.AlterTable(TShockAPI.DB.SqlTable,TShockAPI.DB.SqlTable)">
            <summary>
            Alter a table from source to destination
            </summary>
            <param name="from">Must have name and column names. Column types are not required</param>
            <param name="to">Must have column names and column types.</param>
            <returns></returns>
        </member>
        <member name="P:TShockAPI.DB.SqlColumn.Length">
            <summary>
            Length of the data type, null = default
            </summary>
        </member>
        <member name="M:TShockAPI.DB.SqlTableCreator.EnsureExists(TShockAPI.DB.SqlTable)">
            <summary>
            Ensures a table exists and that its structure is correct
            </summary>
            <param name="table">The table name</param>
        </member>
        <member name="M:TShockAPI.DB.DbExt.Query(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Executes a query on a database.
            </summary>
            <param name="olddb">Database to query</param>
            <param name="query">Query string with parameters as @0, @1, etc.</param>
            <param name="args">Parameters to be put in the query</param>
            <returns>Rows affected by query</returns>
        </member>
        <member name="M:TShockAPI.DB.DbExt.QueryReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Executes a query on a database.
            </summary>
            <param name="olddb">Database to query</param>
            <param name="query">Query string with parameters as @0, @1, etc.</param>
            <param name="args">Parameters to be put in the query</param>
            <returns>Query result as IDataReader</returns>
        </member>
        <member name="M:TShockAPI.DB.GroupManager.AddGroup(System.String,System.String,System.String,System.String)">
            <summary>
            Adds group with name and permissions if it does not exist.
            </summary>
            <param name="name">name of group</param>
            <param name="parentname">parent of group</param>
            <param name="permissions">permissions</param>
            <param name="chatcolor">chatcolor</param>
        </member>
        <member name="M:TShockAPI.DB.GroupManager.AddGroup(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds group with name and permissions if it does not exist.
            </summary>
            <param name="name">name of group</param>
            <param name="parentname">parent of group</param>
            <param name="permissions">permissions</param>
            <param name="chatcolor">chatcolor</param>
            <param name="exceptions">exceptions true indicates use exceptions for errors false otherwise</param>
        </member>
        <member name="M:TShockAPI.DB.GroupManager.UpdateGroup(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates a group including permissions
            </summary>
            <param name="name">name of the group to update</param>
            <param name="parentname">parent of group</param>
            <param name="permissions">permissions</param>
            <param name="chatcolor">chatcolor</param>
            <param name="suffix">suffix</param>
            <param name="prefix">prefix</param> //why is suffix before prefix?!
        </member>
        <member name="T:TShockAPI.DB.UserManager">
            <summary>UserManager - Methods for dealing with database users and other user functionality within TShock.</summary>
        </member>
        <member name="F:TShockAPI.DB.UserManager.database">
            <summary>database - The database object to use for connections.</summary>
        </member>
        <member name="M:TShockAPI.DB.UserManager.#ctor(System.Data.IDbConnection)">
            <summary>UserManager - Creates a UserManager object. During instantiation, this method will verify the table structure against the format below.</summary>
            <param name="db">db - The database to connect to.</param>
            <returns>A UserManager object.</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.AddUser(TShockAPI.DB.User)">
            <summary>
            Adds a given username to the database
            </summary>
            <param name="user">User user</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.RemoveUser(TShockAPI.DB.User)">
            <summary>
            Removes a given username from the database
            </summary>
            <param name="user">User user</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserPassword(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the Hashed Password for a given username
            </summary>
            <param name="user">User user</param>
            <param name="password">string password</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserUUID(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the UUID for a given username
            </summary>
            <param name="user">User user</param>
            <param name="uuid">string uuid</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserGroup(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the group for a given username
            </summary>
            <param name="user">User user</param>
            <param name="group">string group</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.UpdateLogin(TShockAPI.DB.User)">
            <summary>UpdateLogin - Updates the last accessed time for a database user to the current time.</summary>
            <param name="user">user - The user object to modify.</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetUserID(System.String)">
            <summary>GetUserID - Gets the database ID of a given user object from the database.</summary>
            <param name="username">username - The username of the user to query for.</param>
            <returns>int - The user's ID</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetUserByName(System.String)">
            <summary>GetUserByName - Gets a user object by name.</summary>
            <param name="name">name - The user's name.</param>
            <returns>User - The user object returned from the search.</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetUserByID(System.Int32)">
            <summary>GetUserByID - Gets a user object by their user ID.</summary>
            <param name="id">id - The user's ID.</param>
            <returns>User - The user object returned from the search.</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetUser(TShockAPI.DB.User)">
            <summary>GetUser - Gets a user object by a user object.</summary>
            <param name="user">user - The user object to search by.</param>
            <returns>User - The user object that is returned from the search.</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetUsers">
            <summary>GetUsers - Gets all users from the database.</summary>
            <returns>List - The users from the database.</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetUsersByName(System.String,System.Boolean)">
            <summary>
            GetUsersByName - Gets all users from the database with a username that starts with or contains <see cref="!:username"/>
            </summary>
            <param name="username">String - Rough username search. "n" will match "n", "na", "nam", "name", etc</param>
            <param name="notAtStart">Boolean - If <see cref="!:username"/> is not the first part of the username. If true then "name" would match "name", "username", "wordsnamewords", etc</param>
            <returns>List or null - Matching users or null if exception is thrown</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManager.LoadUserFromResult(TShockAPI.DB.User,TShockAPI.DB.QueryResult)">
            <summary>LoadUserFromResult - Fills out the fields of a User object with the results from a QueryResult object.</summary>
            <param name="user">user - The user to add data to.</param>
            <param name="result">result - The QueryResult object to add data from.</param>
            <returns>User - The 'filled out' user object.</returns>
        </member>
        <member name="T:TShockAPI.DB.User">
            <summary>User - A database user.</summary>
        </member>
        <member name="M:TShockAPI.DB.User.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>User - Constructor for the user object, assuming you define everything yourself.</summary>
            <param name="name">name - The user's name.</param>
            <param name="pass">pass - The user's password hash.</param>
            <param name="uuid">uuid - The user's UUID.</param>
            <param name="group">group - The user's group name.</param>
            <param name="registered">registered - The unix epoch for the registration date.</param>
            <param name="last">last - The unix epoch for the last access date.</param>
            <param name="known">known - The known IPs for the user, serialized as a JSON object</param>
            <returns>A completed user object.</returns>
        </member>
        <member name="M:TShockAPI.DB.User.#ctor">
            <summary>User - Default constructor for a user object; holds no data.</summary>
            <returns>A user object.</returns>
        </member>
        <member name="M:TShockAPI.DB.User.VerifyPassword(System.String)">
            <summary>
            Verifies if a password matches the one stored in the database.
            If the password is stored in an unsafe hashing algorithm, it will be converted to BCrypt.
            If the password is stored using BCrypt, it will be re-saved if the work factor in the config
            is greater than the existing work factor with the new work factor.
            </summary>
            <param name="password">string password - The password to check against the user object.</param>
            <returns>bool true, if the password matched, or false, if it didn't.</returns>
        </member>
        <member name="M:TShockAPI.DB.User.UpgradePasswordToBCrypt(System.String)">
            <summary>Upgrades a password to BCrypt, from an insecure hashing algorithm.</summary>
            <param name="password">string password - the raw user password (unhashed) to upgrade</param>
        </member>
        <member name="M:TShockAPI.DB.User.UpgradePasswordWorkFactor(System.String)">
            <summary>Upgrades a password to the highest work factor available in the config.</summary>
            <param name="password">string password - the raw user password (unhashed) to upgrade</param>
        </member>
        <member name="M:TShockAPI.DB.User.CreateBCryptHash(System.String)">
            <summary>Creates a BCrypt hash for a user and stores it in this object.</summary>
            <param name="password">string password - the plain text password to hash</param>
        </member>
        <member name="M:TShockAPI.DB.User.CreateBCryptHash(System.String,System.Int32)">
            <summary>Creates a BCrypt hash for a user and stores it in this object.</summary>
            <param name="password">string password - the plain text password to hash</param>
            <param name="workFactor">int workFactor - the work factor to use in generating the password hash</param>
        </member>
        <member name="F:TShockAPI.DB.User.HashTypes">
            <summary>
            A dictionary of hashing algorithms and an implementation object.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.User.HashPassword(System.Byte[])">
            <summary>
            Returns a hashed string for a given string based on the config file's hash algo
            </summary>
            <param name="bytes">bytes to hash</param>
            <returns>string hash</returns>
        </member>
        <member name="M:TShockAPI.DB.User.HashPassword(System.String)">
            <summary>
            Returns a hashed string for a given string based on the config file's hash algo
            </summary>
            <param name="password">string to hash</param>
            <returns>string hash</returns>
        </member>
        <member name="P:TShockAPI.DB.User.ID">
            <summary>ID - The database ID of the user.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.Name">
            <summary>Name - The user's name.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.Password">
            <summary>Password - The hashed password for the user.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.UUID">
            <summary>UUID - The user's saved Univerally Unique Identifier token.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.Group">
            <summary>Group - The group object that the user is a part of.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.Registered">
            <summary>Registered - The unix epoch corresponding to the registration date of the user.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.LastAccessed">
            <summary>LastAccessed - The unix epoch corresponding to the last access date of the user.</summary>
        </member>
        <member name="P:TShockAPI.DB.User.KnownIps">
            <summary>KnownIps - A JSON serialized list of known IP addresses for a user.</summary>
        </member>
        <member name="T:TShockAPI.DB.UserManagerException">
            <summary>UserManagerException - An exception generated by the user manager.</summary>
        </member>
        <member name="M:TShockAPI.DB.UserManagerException.#ctor(System.String)">
            <summary>UserManagerException - Creates a new UserManagerException object.</summary>
            <param name="message">message - The message for the object.</param>
            <returns>public - a new UserManagerException object.</returns>
        </member>
        <member name="M:TShockAPI.DB.UserManagerException.#ctor(System.String,System.Exception)">
            <summary>UserManagerException - Creates a new UserManagerObject with an internal exception.</summary>
            <param name="message">message - The message for the object.</param>
            <param name="inner">inner - The inner exception for the object.</param>
            <returns>public - a nwe UserManagerException with a defined inner exception.</returns>
        </member>
        <member name="T:TShockAPI.DB.UserExistsException">
            <summary>UserExistsException - A UserExistsException object, used when a user already exists when attempting to create a new one.</summary>
        </member>
        <member name="M:TShockAPI.DB.UserExistsException.#ctor(System.String)">
            <summary>UserExistsException - Creates a new UserExistsException object.</summary>
            <param name="name">name - The name of the user that already exists.</param>
            <returns>public - a UserExistsException object with the user's name passed in the message.</returns>
        </member>
        <member name="T:TShockAPI.DB.UserNotExistException">
            <summary>UserNotExistException - A UserNotExistException, used when a user does not exist and a query failed as a result of it.</summary>
        </member>
        <member name="M:TShockAPI.DB.UserNotExistException.#ctor(System.String)">
            <summary>UserNotExistException - Creates a new UserNotExistException object, with the user's name in the message.</summary>
            <param name="name">name - The user's name to be pasesd in the message.</param>
            <returns>public - a new UserNotExistException object with a message containing the user's name that does not exist.</returns>
        </member>
        <member name="T:TShockAPI.DB.GroupNotExistsException">
            <summary>GroupNotExistsException - A GroupNotExistsException, used when a group does not exist.</summary>
        </member>
        <member name="M:TShockAPI.DB.GroupNotExistsException.#ctor(System.String)">
            <summary>GroupNotExistsException - Creates a new GroupNotExistsException object with the group's name in the message.</summary>
            <param name="group">group - The group name.</param>
            <returns>public - a new GroupNotExistsException with the group that does not exist's name in the message.</returns>
        </member>
        <member name="T:MaxMind.GeoIPCountry">
            <summary>
            Allows for looking up a country based on an IP address.  See www.maxmind.com for more details.
            </summary>
            <example>
            	static void Main(string[] args)
            	{
            		using(GeoIPCountry geo = new GeoIPCountry("GeoIP.dat"))
            		{
            			try
            			{
            				Console.WriteLine("Country code of IP address 67.15.94.80: " + geo.GetCountryCode("67.15.94.80"));
            			}
            			catch(Exception ex)
            			{
            				Console.WriteLine(ex.ToString());
            			}
            		}
            	}
            </example>
        </member>
        <member name="M:MaxMind.GeoIPCountry.#ctor(System.IO.Stream)">
            <summary>
            Initialises a new instance of this class.
            </summary>
            <param name="datafile">An already open stream pointing to the contents of a GeoIP.dat file.</param>
            <remarks>The stream is not closed when this class is disposed. Be sure to clean up afterwards!</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.#ctor(System.String)">
            <summary>
            Initialises a new instance of this class, using an on-disk database.
            </summary>
            <param name="filename">Path to database file.</param>
            <remarks>The file will be closed when this class is disposed.</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.GetCountryCode(System.Net.IPAddress)">
            <summary>
            Retrieves a two-letter code, defined by MaxMind, which details the country the specified IP address is located.
            </summary>
            <param name="ip">IP address to query.</param>
            <returns>A two-letter code string. Throws exceptions on failure.</returns>
            <remarks>The IP address must be IPv4.</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.TryGetCountryCode(System.Net.IPAddress)">
            <summary>
            Retrieves a two-letter code, defined by MaxMind, which details the country the specified IP address is located. Does not throw exceptions on failure.
            </summary>
            <param name="ip">IP address to query.</param>
            <returns>Two-letter country code or null on failure.</returns>
        </member>
        <member name="M:MaxMind.GeoIPCountry.GetCountryNameByCode(System.String)">
            <summary>
            Gets the English name of a country, by a country code.
            </summary>
            <param name="countrycode">Country code to look up, returned by GetCountryCode or TryGetCountryCode.</param>
            <returns>English name of the country, or null on failure.</returns>
        </member>
        <member name="M:TShockAPI.HandlerList`1.Register(System.EventHandler{`0},TShockAPI.HandlerPriority,System.Boolean)">
            <summary>
            Register a handler
            </summary>
            <param name="handler">Delegate to be called</param>
            <param name="priority">Priority of the delegate</param>
            <param name="gethandled">Should the handler receive a call even if it has been handled</param>
        </member>
        <member name="T:TShockAPI.IPackable">
            <summary>
            Derived objects can be written to and read from streams.
            </summary>
        </member>
        <member name="M:TShockAPI.IPackable.Pack(System.IO.Stream)">
            <summary>
            Writes object information to the stream
            </summary>
            <param name="stream">Stream to write to</param>
        </member>
        <member name="M:TShockAPI.IPackable.Unpack(System.IO.Stream)">
            <summary>
            Reads object information from the stream
            </summary>
            <param name="stream">Stream to read from</param>
        </member>
        <member name="P:TShockAPI.CommandArgs.Parameters">
            <summary>
            Parameters passed to the arguement. Does not include the command name.
            IE '/kick "jerk face"' will only have 1 argument
            </summary>
        </member>
        <member name="P:TShockAPI.Command.AllowServer">
            <summary>
            Gets or sets whether to allow non-players to use this command.
            </summary>
        </member>
        <member name="P:TShockAPI.Command.DoLog">
            <summary>
            Gets or sets whether to do logging of this command.
            </summary>
        </member>
        <member name="P:TShockAPI.Command.HelpText">
            <summary>
            Gets or sets the help text of this command.
            </summary>
        </member>
        <member name="P:TShockAPI.Command.HelpDesc">
            <summary>
            Gets or sets an extended description of this command.
            </summary>
        </member>
        <member name="P:TShockAPI.Command.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:TShockAPI.Command.Names">
            <summary>
            Gets the names of the command.
            </summary>
        </member>
        <member name="P:TShockAPI.Command.Permissions">
            <summary>
            Gets the permissions of the command.
            </summary>
        </member>
        <member name="M:TShockAPI.Commands.ParseParameters(System.String)">
            <summary>
            Parses a string of parameters into a list. Handles quotes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.ConfigFile.Read(System.String)">
            <summary>
            Reads a configuration file from a given path
            </summary>
            <param name="path">string path</param>
            <returns>ConfigFile object</returns>
        </member>
        <member name="M:TShockAPI.ConfigFile.Read(System.IO.Stream)">
            <summary>
            Reads the configuration file from a stream
            </summary>
            <param name="stream">stream</param>
            <returns>ConfigFile object</returns>
        </member>
        <member name="M:TShockAPI.ConfigFile.Write(System.String)">
            <summary>
            Writes the configuration to a given path
            </summary>
            <param name="path">string path - Location to put the config file</param>
        </member>
        <member name="M:TShockAPI.ConfigFile.Write(System.IO.Stream)">
            <summary>
            Writes the configuration to a stream
            </summary>
            <param name="stream">stream</param>
        </member>
        <member name="F:TShockAPI.ConfigFile.ConfigRead">
            <summary>
            On config read hook
            </summary>
        </member>
        <member name="M:TShockAPI.ConfigFile.DumpDescriptions">
            <summary>
            Dumps all configuration options to a text file in Markdown format
            </summary>
        </member>
        <member name="M:TShockAPI.FileTools.CreateFile(System.String)">
            <summary>
            Creates an empty file at the given path.
            </summary>
            <param name="file">The path to the file.</param>
        </member>
        <member name="M:TShockAPI.FileTools.CreateIfNot(System.String,System.String)">
            <summary>
            Creates a file if the files doesn't already exist.
            </summary>
            <param name="file">The path to the files</param>
            <param name="data">The data to write to the file.</param>
        </member>
        <member name="M:TShockAPI.FileTools.SetupConfig">
            <summary>
            Sets up the configuration file for all variables, and creates any missing files.
            </summary>
        </member>
        <member name="M:TShockAPI.FileTools.OnWhitelist(System.String)">
            <summary>
            Tells if a user is on the whitelist
            </summary>
            <param name="ip">string ip of the user</param>
            <returns>true/false</returns>
        </member>
        <member name="P:TShockAPI.FileTools.RulesPath">
            <summary>
            Path to the file containing the rules.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.MotdPath">
            <summary>
            Path to the file containing the message of the day.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.WhitelistPath">
            <summary>
            Path to the file containing the whitelist.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.ConfigPath">
            <summary>
            Path to the file containing the config.
            </summary>
        </member>
        <member name="P:TShockAPI.FileTools.ServerSideCharacterConfigPath">
            <summary>
            Path to the file containing the config.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TileEdit">
            <summary>
            TileEdit - called when a tile is placed or destroyed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TogglePvp">
            <summary>
            TogglePvp - called when a player toggles pvp
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerTeam">
            <summary>
            TogglePvp - called when a player toggles pvp
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerSlot">
            <summary>
            PlayerSlot - called at a PlayerSlot event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerHP">
            <summary>
            PlayerHP - called at a PlayerHP event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerMana">
            <summary>
            PlayerMana - called at a PlayerMana event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerInfo">
            <summary>
            PlayerInfo - called at a PlayerInfo event
            If this is cancelled, the server will ForceKick the player. If this should be changed in the future, let someone know.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TileKill">
            <summary>
            TileKill - When a tile is removed fromt he world
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.KillMe">
            <summary>
            KillMe - Terraria's crappy way of handling damage from players
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerUpdate">
            <summary>
            PlayerUpdate - When the player sends it's updated information to the server
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.SendTileSquare">
            <summary>
            SendTileSquare - When the player sends a tile square
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NewProjectile">
            <summary>
            NewProjectile - Called when a client creates a new projectile
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.LiquidSet">
            <summary>
            LiquidSet - When ever a liquid is set
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerSpawn">
            <summary>
            PlayerSpawn - When a player spawns
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ChestOpen">
            <summary>
            ChestOpen - Called when any chest is opened
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ChestItemChange">
            <summary>
            ChestItemChange - Called when an item in a chest changes
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.Sign">
            <summary>
            Sign - Called when a sign is changed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NPCHome">
            <summary>
            NPCHome - Called when an NPC's home is changed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerBuff">
            <summary>
            PlayerBuff - Called when a player is buffed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ItemDrop">
            <summary>
            ItemDrop - Called when an item is dropped
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerDamage">
            <summary>
            PlayerDamage - Called when a player is damaged
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NPCStrike">
            <summary>
            NPCStrike - Called when an NPC is attacked
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.NPCSpecial">
            <summary>
            NPCSpecial - Called at some point
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerAnimation">
            <summary>
            PlayerAnimation - Called when a player animates
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerBuffUpdate">
            <summary>
            PlayerBuffUpdate - Called when a player updates buffs
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.Teleport">
            <summary>
            NPCStrike - Called when an NPC is attacked
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.orientableTiles">
            <summary>
            Tiles that can be oriented (e.g., beds, chairs, bathtubs, etc).
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.breakableTiles">
            <summary>
            Tiles that can be broken without any pickaxes/etc.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.MaxPlaceStyles">
            <summary>
            The maximum place styles for each tile.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.projectileCreatesTile">
            <summary>
            These projectiles create tiles on death.
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.ExtraneousPlaceStyles">
            <summary>
            Extra place style limits for strange hardcoded values in Terraria
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PaintTile">
            <summary>
            NPCStrike - Called when an NPC is attacked
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PaintWall">
            <summary>
            Called When a wall is painted
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TileEditEventArgs">
            <summary>
            Used when a TileEdit event is called.
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Player">
            <summary>
            The TSPlayer who made the tile edit
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.X">
            <summary>
            The tile coordinate on the X plane
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Y">
            <summary>
            The tile coordinate on the Y plane
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.EditData">
            <summary>
            The Tile ID being edited.
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Action">
            <summary>
            The EditType.
            (KillTile = 0, PlaceTile = 1, KillWall = 2, PlaceWall = 3, KillTileNoItem = 4, PlaceWire = 5, KillWire = 6)
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.editDetail">
            <summary>
            Did the tile get destroyed successfully.
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileEditEventArgs.Style">
            <summary>
            Used when a tile is placed to denote a subtype of tile. (e.g. for tile id 21: Chest = 0, Gold Chest = 1)
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TogglePvpEventArgs">
            <summary>
            For use in a TogglePvp event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TogglePvpEventArgs.PlayerId">
            <summary>
            The Terraria player ID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TogglePvpEventArgs.Pvp">
            <summary>
            Enable/disable pvp?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerTeamEventArgs">
            <summary>
            For use in a PlayerTeam event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerTeamEventArgs.PlayerId">
            <summary>
            The Terraria player ID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerTeamEventArgs.Team">
            <summary>
            Enable/disable pvp?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerSlotEventArgs">
            <summary>
            For use in a PlayerSlot event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.PlayerId">
            <summary>
            The Terraria playerID
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Slot">
            <summary>
            The slot edited
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Stack">
            <summary>
            The stack edited
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Prefix">
            <summary>
            The item prefix
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerSlotEventArgs.Type">
            <summary>
            Item type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerHPEventArgs">
            <summary>
            For use in a PlayerHP event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerHPEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerHPEventArgs.Current">
            <summary>
            Current HP
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerHPEventArgs.Max">
            <summary>
            Maximum HP
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerManaEventArgs">
            <summary>
            For use in a PlayerMana event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Hair">
            <summary>
            Hair color
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Male">
            <summary>
            Gender (male = true)
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Difficulty">
            <summary>
            Character difficulty
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerInfoEventArgs.Name">
            <summary>
            Player/character name
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TileKillEventArgs">
            <summary>
            For use in a TileKill event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileKillEventArgs.TileX">
            <summary>
            The X coordinate that is being killed
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TileKillEventArgs.TileY">
            <summary>
            The Y coordinate that is being killed
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.KillMeEventArgs">
            <summary>
            For use in a KillMe event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.Direction">
            <summary>
            The direction the damage is coming from (?)
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.Damage">
            <summary>
            Amount of damage delt
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.KillMeEventArgs.Pvp">
            <summary>
            Player's current pvp setting
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs">
            <summary>
            For use in a PlayerUpdate event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.PlayerId">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Control">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Item">
            <summary>
            Current item?
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Position">
            <summary>
            Position of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerUpdateEventArgs.Velocity">
            <summary>
            Velocity of the player
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.SendTileSquareEventArgs">
            <summary>
            For use in a SendTileSquare event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SendTileSquareEventArgs.Size">
            <summary>
            Size of the area
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SendTileSquareEventArgs.TileX">
            <summary>
            A corner of the section
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SendTileSquareEventArgs.TileY">
            <summary>
            A corner of the section
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NewProjectileEventArgs">
            <summary>
            For use in a NewProjectile event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Identity">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Position">
            <summary>
            Location of the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Velocity">
            <summary>
            Velocity of the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Knockback">
            <summary>
            Knockback
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Damage">
            <summary>
            Damage from the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Owner">
            <summary>
            Terraria playerID owner of the projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Type">
            <summary>
            Type of projectile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NewProjectileEventArgs.Index">
            <summary>
            ???
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.LiquidSetEventArgs">
            <summary>
            For use in a LiquidSet event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.TileX">
            <summary>
            X location of the tile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.TileY">
            <summary>
            Y location of the tile
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.Amount">
            <summary>
            Amount of liquid
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.LiquidSetEventArgs.Type">
            <summary>
            Type of Liquid: 0=water, 1=lave, 2=honey
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.SpawnEventArgs">
            <summary>
            For use in a PlayerSpawn event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SpawnEventArgs.Player">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SpawnEventArgs.SpawnX">
            <summary>
            X location of the player's spawn
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SpawnEventArgs.SpawnY">
            <summary>
            Y location of the player's spawn
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.ChestOpenEventArgs">
            <summary>
            For use with a ChestOpen event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestOpenEventArgs.X">
            <summary>
            X location of said chest
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestOpenEventArgs.Y">
            <summary>
            Y location of said chest
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestOpenEventArgs.Player">
            <summary>
            The player opening the chest
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.ChestItemEventArgs">
            <summary>
            For use in a ChestItemChange event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.ID">
            <summary>
            ChestID
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Slot">
            <summary>
            Slot of the item
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Stacks">
            <summary>
            How many?
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Prefix">
            <summary>
            Item prefix
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ChestItemEventArgs.Type">
            <summary>
            Item type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.SignEventArgs">
            <summary>
            For use in a Sign event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SignEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SignEventArgs.X">
            <summary>
            X location of the sign
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.SignEventArgs.Y">
            <summary>
            Y location of the sign
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs">
            <summary>
            For use in a NPCHome event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.X">
            <summary>
            X location of the NPC home change
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.Y">
            <summary>
            Y location of the NPC home change
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCHomeChangeEventArgs.Homeless">
            <summary>
            ByteBool homeless
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerBuffEventArgs">
            <summary>
            For use in a PlayerBuff event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffEventArgs.Type">
            <summary>
            Buff Type
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffEventArgs.Time">
            <summary>
            Time the buff lasts
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.ItemDropEventArgs">
            <summary>
            For use in an ItemDrop event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Position">
            <summary>
            Position of the item
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Velocity">
            <summary>
            Velocity at which the item is deployed
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Stacks">
            <summary>
            Stacks
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Prefix">
            <summary>
            Prefix of the item
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.NoDelay">
            <summary>
            No Delay on pickup
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.ItemDropEventArgs.Type">
            <summary>
            Item type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerDamageEventArgs">
            <summary>
            For use in a PlayerDamage event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.Direction">
            <summary>
            The direction the damage is occuring from
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.Damage">
            <summary>
            Amount of damage
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.PVP">
            <summary>
            If the player has PVP on
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerDamageEventArgs.Critical">
            <summary>
            Is the damage critical?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NPCStrikeEventArgs">
            <summary>
            For use with a NPCStrike event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.ID">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Direction">
            <summary>
            Direction the damage occurred from
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Damage">
            <summary>
            Amount of damage
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Knockback">
            <summary>
            Knockback
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCStrikeEventArgs.Critical">
            <summary>
            Critical?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.NPCSpecialEventArgs">
            <summary>
            For use with a NPCSpecial event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCSpecialEventArgs.ID">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.NPCSpecialEventArgs.Type">
            <summary>
            Type...?
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerAnimationEventArgs">
            <summary>
            For use with a PlayerAnimation event
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PlayerBuffUpdateEventArgs">
            <summary>
            For use in a PlayerBuffUpdate event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PlayerBuffUpdateEventArgs.ID">
            <summary>
            The Terraria playerID of the player
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.TeleportEventArgs">
            <summary>
            For use with a NPCStrike event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TeleportEventArgs.ID">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TeleportEventArgs.Flag">
            <summary>
            Flag is a bit field
              if the first bit is set -> 0 = player, 1 = NPC
              if the second bit is set, ignore this packet
              if the third bit is set, style +1
              if the fourth bit is set, style +1
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TeleportEventArgs.X">
            <summary>
            X Location
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.TeleportEventArgs.Y">
            <summary>
            Y Location
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PaintTileEventArgs">
            <summary>
            For use with a PaintTile event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PaintTileEventArgs.X">
            <summary>
            X Location
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PaintTileEventArgs.Y">
            <summary>
            Y Location
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PaintTileEventArgs.type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:TShockAPI.GetDataHandlers.PaintWallEventArgs">
            <summary>
            For use with a PaintWall event
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PaintWallEventArgs.X">
            <summary>
            X Location
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PaintWallEventArgs.Y">
            <summary>
            Y Location
            </summary>
        </member>
        <member name="P:TShockAPI.GetDataHandlers.PaintWallEventArgs.type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:TShockAPI.Group.defaultChatColor">
            <summary>
            Default chat color.
            </summary>
        </member>
        <member name="F:TShockAPI.Group.permissions">
            <summary>
            List of permissions available to the group.
            </summary>
        </member>
        <member name="F:TShockAPI.Group.negatedpermissions">
            <summary>
            List of permissions that the group is explicitly barred from.
            </summary>
        </member>
        <member name="M:TShockAPI.Group.HasPermission(System.String)">
            <summary>
            Checks to see if a group has a specified permission.
            </summary>
            <param name="permission">The permission to check.</param>
            <returns>Returns true if the user has that permission.</returns>
        </member>
        <member name="M:TShockAPI.Group.NegatePermission(System.String)">
            <summary>
            Adds a permission to the list of negated permissions.
            </summary>
            <param name="permission">The permission to negate.</param>
        </member>
        <member name="M:TShockAPI.Group.AddPermission(System.String)">
            <summary>
            Adds a permission to the list of permissions.
            </summary>
            <param name="permission">The permission to add.</param>
        </member>
        <member name="M:TShockAPI.Group.SetPermission(System.Collections.Generic.List{System.String})">
            <summary>
            Clears the permission list and sets it to the list provided, 
            will parse "!permssion" and add it to the negated permissions.
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:TShockAPI.Group.RemovePermission(System.String)">
            <summary>
            Will remove a permission from the respective list,
            where "!permission" will remove a negated permission.
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:TShockAPI.Group.AssignTo(TShockAPI.Group)">
            <summary>
            Assigns all fields of this instance to another.
            </summary>
            <param name="otherGroup">The other instance.</param>
        </member>
        <member name="P:TShockAPI.Group.Name">
            <summary>
            The group's name.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Parent">
            <summary>
            The group that this group inherits permissions from.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Prefix">
            <summary>
            The chat prefix for this group.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Suffix">
            <summary>
            The chat suffix for this group.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.ParentName">
            <summary>
            The name of the parent, not particularly sure why this is here.
            We can use group.Parent.Name and not have this second reference. 
            This was added for rest, so a discussion with Shank is necessary.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.ChatColor">
            <summary>
            The chat color of the group.
            Returns "255,255,255", sets "255,255,255"
            </summary>
        </member>
        <member name="P:TShockAPI.Group.Permissions">
            <summary>
            The permissions of the user in string form.
            </summary>
        </member>
        <member name="P:TShockAPI.Group.TotalPermissions">
            <summary>
            The permissions of this group and all that it inherits from.
            </summary>
        </member>
        <member name="T:TShockAPI.SuperAdminGroup">
            <summary>
            This class is the SuperAdminGroup, which has access to everything.
            </summary>
        </member>
        <member name="M:TShockAPI.SuperAdminGroup.HasPermission(System.String)">
            <summary>
            Override to allow access to everything.
            </summary>
            <param name="permission">The permission</param>
            <returns>True</returns>
        </member>
        <member name="P:TShockAPI.PacketBufferer.BytesPerUpdate">
            <summary>
            Maximum number of bytes to send per update per socket
            </summary>
        </member>
        <member name="M:TShockAPI.Permissions.GetCommands(System.String)">
            <summary>
            Lists all commands associated with a given permission
            </summary>
            <param name="perm">string permission - the permission to get information on</param>
            <returns>List of commands</returns>
        </member>
        <member name="M:TShockAPI.Permissions.DumpDescriptions">
            <summary>
            Dumps the descriptions of each permission to a file in Markdown format.
            </summary>
        </member>
        <member name="T:TShockAPI.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Rests.RestCommandD">
            <summary>
            Rest command delegate
            </summary>
            <param name="args">RestRequestArgs object containing Verbs, Parameters, Request, and TokenData</param>
            <returns>Response object or null to not handle request</returns>
        </member>
        <member name="M:Rests.RestCommand.#ctor(System.String,System.String,Rests.RestCommandD)">
            <summary>
            
            </summary>
            <param name="name">Used for identification</param>
            <param name="uritemplate">Url template</param>
            <param name="callback">Rest Command callback</param>
        </member>
        <member name="M:Rests.RestCommand.#ctor(System.String,Rests.RestCommandD)">
            <summary>
            
            </summary>
            <param name="uritemplate">Url template</param>
            <param name="callback">Rest Command callback</param>
        </member>
        <member name="P:Rests.RestObject.Item(System.String)">
            <summary>
            Gets value safely, if it does not exist, return null. Sets/Adds value safely, if null it will remove.
            </summary>
            <param name="key">the key</param>
            <returns>Returns null if key does not exist.</returns>
        </member>
        <member name="P:Rests.RestVerbs.Item(System.String)">
            <summary>
            Gets value safely, if it does not exist, return null. Sets/Adds value safely, if null it will remove.
            </summary>
            <param name="key">the key</param>
            <returns>Returns null if key does not exist.</returns>
        </member>
        <member name="M:TShockAPI.ServerSideCharacters.ServerSideConfig.DumpDescriptions">
            <summary>
            Dumps all configuration options to a text file in Markdown format
            </summary>
        </member>
        <member name="T:TShockAPI.Utils">
            <summary>
            Utilities and other TShock core calls that don't fit anywhere else
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.FirstItemPrefix">
            <summary>
            The lowest id for a prefix.
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.LastItemPrefix">
            <summary>
            The highest id for a prefix.
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.instance">
            <summary>instance - an instance of the utils class</summary>
        </member>
        <member name="M:TShockAPI.Utils.#ctor">
            <summary>Utils - Creates a utilities object.</summary>
        </member>
        <member name="F:TShockAPI.Utils.Random">
            <summary>Random - An instance of random for generating random data.</summary>
        </member>
        <member name="M:TShockAPI.Utils.GetRealIP(System.String)">
            <summary>
            Provides the real IP address from a RemoteEndPoint string that contains a port and an IP
            </summary>
            <param name="mess">A string IPv4 address in IP:PORT form.</param>
            <returns>A string IPv4 address.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayers(System.Boolean)">
            <summary>
            Returns a list of current players on the server
            </summary>
            <param name="includeIDs">bool includeIDs - whether or not the string of each player name should include ID data</param>
            <returns>List of strings with names</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayerIP(System.String)">
            <summary>
            Finds a player and gets IP as string
            </summary>
            <param name="playername">string playername</param>
        </member>
        <member name="M:TShockAPI.Utils.Clamp``1(``0,``0,``0)">
            <summary>
            It's a clamp function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to clamp</param>
            <param name="max">Maximum bounds of the clamp</param>
            <param name="min">Minimum bounds of the clamp</param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.Utils.SaveWorld">
            <summary>
            Saves the map data by calling the SaveManager and instructing it to save the world.
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.Broadcast(System.String,System.Byte,System.Byte,System.Byte)">
            <summary>Broadcast - Broadcasts a message to all players on the server, as well as the server console, and the logs.</summary>
            <param name="msg">msg - The message to send</param>
            <param name="red">red - The amount of red (0-255) in the color for supported destinations.</param>
            <param name="green">green - The amount of green (0-255) in the color for supported destinations.</param>
            <param name="blue">blue - The amount of blue (0-255) in the color for the supported destinations.</param>
        </member>
        <member name="M:TShockAPI.Utils.Broadcast(System.String,Color)">
            <summary>>Broadcast - Broadcasts a message to all players on the server, as well as the server console, and the logs.</summary>
            <param name="msg">msg - The message to send</param>
            <param name="color">color - The color object for supported destinations.</param>
        </member>
        <member name="M:TShockAPI.Utils.Broadcast(System.Int32,System.String,System.Byte,System.Byte,System.Byte)">
            <summary>
            Broadcasts a message from a Terraria playerplayer, not TShock
            </summary>
            <param name="ply">ply - the Terraria player index that will send the packet</param>
            <param name="msg">msg - The message to send</param>
            <param name="red">red - The amount of red (0-255) in the color for supported destinations.</param>
            <param name="green">green - The amount of green (0-255) in the color for supported destinations.</param>
            <param name="blue">blue - The amount of blue (0-255) in the color for the supported destinations.</param>
        </member>
        <member name="M:TShockAPI.Utils.SendLogs(System.String,Color,TShockAPI.TSPlayer)">
            <summary>
            Sends message to all players with 'logs' permission.
            </summary>
            <param name="log">Message to send</param>
            <param name="color">Color of the message</param>
            <param name="excludedPlayer">The player to not send the message to.</param>
        </member>
        <member name="M:TShockAPI.Utils.ActivePlayers">
            <summary>
            Gets the number of active players on the server.
            </summary>
            <returns>The number of active players on the server.</returns>
        </member>
        <member name="M:TShockAPI.Utils.FindPlayer(System.String)">
            <summary>
            Finds a TSPlayer based on name or ID
            </summary>
            <param name="plr">Player name or ID</param>
            <returns>A list of matching players</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetRandomClearTileWithInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets a random clear tile in range
            </summary>
            <param name="startTileX">Bound X</param>
            <param name="startTileY">Bound Y</param>
            <param name="tileXRange">Range on the X axis</param>
            <param name="tileYRange">Range on the Y axis</param>
            <param name="tileX">X location</param>
            <param name="tileY">Y location</param>
        </member>
        <member name="M:TShockAPI.Utils.TilePlacementValid(System.Int32,System.Int32)">
            <summary>
            Determines if a tile is valid.
            </summary>
            <param name="tileX">Location X</param>
            <param name="tileY">Location Y</param>
            <returns>If the tile is valid</returns>
        </member>
        <member name="M:TShockAPI.Utils.TileSolid(System.Int32,System.Int32)">
            <summary>
            Checks if the tile is solid.
            </summary>
            <param name="tileX">Location X</param>
            <param name="tileY">Location Y</param>
            <returns>The tile's solidity.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetItemByIdOrName(System.String)">
            <summary>
            Gets a list of items by ID or name
            </summary>
            <param name="idOrName">Item ID or name</param>
            <returns>List of Items</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetItemById(System.Int32)">
            <summary>
            Gets an item by ID
            </summary>
            <param name="id">ID</param>
            <returns>Item</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetItemByName(System.String)">
            <summary>
            Gets items by name
            </summary>
            <param name="name">name</param>
            <returns>List of Items</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetNPCByIdOrName(System.String)">
            <summary>
            Gets an NPC by ID or Name
            </summary>
            <param name="idOrName"></param>
            <returns>List of NPCs</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetNPCById(System.Int32)">
            <summary>
            Gets an NPC by ID
            </summary>
            <param name="id">ID</param>
            <returns>NPC</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetNPCByName(System.String)">
            <summary>
            Gets a NPC by name
            </summary>
            <param name="name">Name</param>
            <returns>List of matching NPCs</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetBuffName(System.Int32)">
            <summary>
            Gets a buff name by id
            </summary>
            <param name="id">ID</param>
            <returns>name</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetBuffDescription(System.Int32)">
            <summary>
            Gets the description of a buff
            </summary>
            <param name="id">ID</param>
            <returns>description</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetBuffByName(System.String)">
            <summary>
            Gets a list of buffs by name
            </summary>
            <param name="name">name</param>
            <returns>Matching list of buff ids</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPrefixById(System.Int32)">
            <summary>
            Gets a prefix based on its id
            </summary>
            <param name="id">ID</param>
            <returns>Prefix name</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPrefixByName(System.String)">
            <summary>
            Gets a list of prefixes by name
            </summary>
            <param name="name">Name</param>
            <returns>List of prefix IDs</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPrefixByIdOrName(System.String)">
            <summary>
            Gets a prefix by ID or name
            </summary>
            <param name="idOrName">ID or name</param>
            <returns>List of prefix IDs</returns>
        </member>
        <member name="M:TShockAPI.Utils.ForceKickAll(System.String)">
            <summary>
            Kicks all player from the server without checking for immunetokick permission.
            </summary>
            <param name="reason">string reason</param>
        </member>
        <member name="M:TShockAPI.Utils.StopServer(System.Boolean,System.String)">
            <summary>
            Stops the server after kicking all players with a reason message, and optionally saving the world
            </summary>
            <param name="save">bool perform a world save before stop (default: true)</param>
            <param name="reason">string reason (default: "Server shutting down!")</param>
        </member>
        <member name="M:TShockAPI.Utils.RestartServer(System.Boolean,System.String)">
            <summary>
            Stops the server after kicking all players with a reason message, and optionally saving the world then attempts to 
            restart it.
            </summary>
            <param name="save">bool perform a world save before stop (default: true)</param>
            <param name="reason">string reason (default: "Server shutting down!")</param>
        </member>
        <member name="M:TShockAPI.Utils.Reload(TShockAPI.TSPlayer)">
            <summary>
            Reloads all configuration settings, groups, regions and raises the reload event.
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.ForceKick(TShockAPI.TSPlayer,System.String,System.Boolean,System.Boolean)">
            <summary>
            Kicks a player from the server without checking for immunetokick permission.
            </summary>
            <param name="player">TSPlayer player</param>
            <param name="reason">string reason</param>
            <param name="silent">bool silent (default: false)</param>
            <param name="saveSSI">bool saveSSI (default: false)</param>
        </member>
        <member name="M:TShockAPI.Utils.Kick(TShockAPI.TSPlayer,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Kicks a player from the server..
            </summary>
            <param name="player">TSPlayer player</param>
            <param name="reason">string reason</param>
            <param name="force">bool force (default: false)</param>
            <param name="silent">bool silent (default: false)</param>
            <param name="adminUserName">string adminUserName (default: null)</param>
            <param name="saveSSI">bool saveSSI (default: false)</param>
        </member>
        <member name="M:TShockAPI.Utils.Ban(TShockAPI.TSPlayer,System.String,System.Boolean,System.String)">
            <summary>
            Bans and kicks a player from the server.
            </summary>
            <param name="player">TSPlayer player</param>
            <param name="reason">string reason</param>
            <param name="force">bool force (default: false)</param>
            <param name="adminUserName">string adminUserName (default: null)</param>
        </member>
        <member name="M:TShockAPI.Utils.HasBanExpired(TShockAPI.DB.Ban,System.Boolean)">
            <summary>HasBanExpired - Returns whether or not a ban has expired or not.</summary>
            <param name="ban">ban - The ban object to check.</param>
            <param name="byName">byName - Defines whether or not the ban should be checked by name.</param>
            <returns>bool - True if the ban has expired.</returns>
        </member>
        <member name="M:TShockAPI.Utils.ShowFileToUser(TShockAPI.TSPlayer,System.String)">
            <summary>
            Shows a file to the user.
            </summary>
            <param name="player">TSPlayer player</param>
            <param name="file">string filename reletave to savedir</param>
        </member>
        <member name="M:TShockAPI.Utils.GetGroup(System.String)">
            <summary>
            Returns a Group from the name of the group
            </summary>
            <param name="groupName">string groupName</param>
        </member>
        <member name="M:TShockAPI.Utils.GetIPv4Address(System.String)">
            <summary>
            Returns an IPv4 address from a DNS query
            </summary>
            <param name="hostname">string ip</param>
        </member>
        <member name="M:TShockAPI.Utils.SendMultipleMatchError(TShockAPI.TSPlayer,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends the player an error message stating that more than one match was found
            appending a csv list of the matches.
            </summary>
            <param name="ply">Player to send the message to</param>
            <param name="matches">An enumerable list with the matches</param>
        </member>
        <member name="F:TShockAPI.Utils.HashAlgo">
            <summary>
            Default hashing algorithm.
            </summary>
        </member>
        <member name="F:TShockAPI.Utils.HashTypes">
            <summary>
            A dictionary of hashing algortihms and an implementation object.
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.HashPassword(System.Byte[])">
            <summary>
            Returns a Sha256 string for a given string
            </summary>
            <param name="bytes">bytes to hash</param>
            <returns>string sha256</returns>
        </member>
        <member name="M:TShockAPI.Utils.HashPassword(System.String)">
            <summary>
            Returns a Sha256 string for a given string
            </summary>
            <param name="password">string to hash</param>
            <returns>string sha256</returns>
        </member>
        <member name="M:TShockAPI.Utils.ValidString(System.String)">
            <summary>
            Checks if the string contains any unprintable characters
            </summary>
            <param name="str">String to check</param>
            <returns>True if the string only contains printable characters</returns>
        </member>
        <member name="M:TShockAPI.Utils.MaxChests">
            <summary>
            Checks if world has hit the max number of chests
            </summary>
            <returns>True if the entire chest array is used</returns>
        </member>
        <member name="M:TShockAPI.Utils.TryParseTime(System.String,System.Int32@)">
            <summary>
            Attempts to parse a string as a timespan (_d_m_h_s).
            </summary>
            <param name="str">The time string.</param>
            <param name="seconds">The seconds.</param>
            <returns>Whether the string was parsed successfully.</returns>
        </member>
        <member name="M:TShockAPI.Utils.SearchProjectile(System.Int16,System.Int32)">
            <summary>
            Searches for a projectile by identity and owner
            </summary>
            <param name="identity">identity</param>
            <param name="owner">owner</param>
            <returns>projectile ID</returns>
        </member>
        <member name="M:TShockAPI.Utils.SanitizeString(System.String)">
            <summary>
            Sanitizes input strings
            </summary>
            <param name="str">string</param>
            <returns>sanitized string</returns>
        </member>
        <member name="M:TShockAPI.Utils.EnumerateRegionBoundaries(Rectangle)">
            <summary>
            Enumerates boundary points of the given region's rectangle.
            </summary>
            <param name="regionArea">The region's area to enumerate through.</param>
            <returns>The enumerated boundary points.</returns>
        </member>
        <member name="M:TShockAPI.Utils.EncodeColor(System.Nullable{Color})">
            <summary>EncodeColor - Encodes a color as an int.</summary>
            <param name="color">color - The color to encode</param>
            <returns>int? - The encoded color</returns>
        </member>
        <member name="M:TShockAPI.Utils.DecodeColor(System.Nullable{System.Int32})">
            <summary>DecodeColor - Decodes a color encoded by the EncodeColor function.</summary>
            <param name="encodedColor">encodedColor - The encoded color</param>
            <returns>Color? - The decoded color</returns>
        </member>
        <member name="M:TShockAPI.Utils.EncodeBitsByte(System.Nullable{Terraria.BitsByte})">
            <summary>EncodeBitsByte - Encodes a BitsByte as a byte.</summary>
            <param name="bitsByte">bitsByte - The BitsByte object</param>
            <returns>byte? - The converted byte</returns>
        </member>
        <member name="M:TShockAPI.Utils.DecodeBitsByte(System.Nullable{System.Int32})">
            <summary>DecodeBitsByte - Decodes a bitsbyte from an int.</summary>
            <param name="encodedBitsByte">encodedBitsByte - The encoded bitsbyte object.</param>
            <returns>BitsByte? - The decoded bitsbyte object</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetResponseNoException(System.Net.HttpWebRequest)">
            <summary>GetResponseNoException - Gets a web response without generating an exception.</summary>
            <param name="req">req - The request to send.</param>
            <returns>HttpWebResponse - The response object.</returns>
        </member>
        <member name="P:TShockAPI.Utils.Instance">
            <summary>Instance - An instance of the utils class.</summary>
            <value>value - the Utils instance</value>
        </member>
        <member name="T:TShockAPI.TShock">
            <summary>
            This is the TShock main class. TShock is a plugin on the TerrariaServerAPI, so it extends the base TerrariaPlugin.
            TShock also complies with the API versioning system, and defines its required API version here.
            </summary>
        </member>
        <member name="F:TShockAPI.TShock.LogFormatDefault">
            <summary>LogFormatDefault - This is the default log file naming format. Actually, this is the only log format, because it never gets set again.</summary>
        </member>
        <member name="F:TShockAPI.TShock.LogPathDefault">
            <summary>LogPathDefault - The default log path.</summary>
        </member>
        <member name="F:TShockAPI.TShock.VersionNum">
            <summary>VersionNum - The version number the TerrariaAPI will return back to the API. We just use the Assembly info.</summary>
        </member>
        <member name="F:TShockAPI.TShock.VersionCodename">
            <summary>VersionCodename - The version codename is displayed when the server starts. Inspired by software codenames conventions.</summary>
        </member>
        <member name="F:TShockAPI.TShock.SavePath">
            <summary>SavePath - This is the path TShock saves its data in. This path is relative to the TerrariaServer.exe (not in ServerPlugins).</summary>
        </member>
        <member name="F:TShockAPI.TShock.LogFormat">
            <summary>LogFormat - This is the log format, which is never set again.</summary>
        </member>
        <member name="F:TShockAPI.TShock.LogPath">
            <summary>This is the log path, which is initially set to the default log path, and then to the config file log path later.</summary>
        </member>
        <member name="F:TShockAPI.TShock.LogClear">
            <summary>LogClear - Determines whether or not the log file should be cleared on initialization.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Players">
            <summary>Players - Contains all TSPlayer objects for accessing TSPlayers currently on the server</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:TShockAPI.TShock.Bans" -->
        <member name="F:TShockAPI.TShock.Warps">
            <summary>Warps - Static reference to the warp manager for accessing the warp system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Regions">
            <summary>Regions - Static reference to the region manager for accessing the region system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Backups">
            <summary>Backups - Static reference to the backup manager for accessing the backup system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Groups">
            <summary>Groups - Static reference to the group manager for accessing the group system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Users">
            <summary>Users - Static reference to the user manager for accessing the user database system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Itembans">
            <summary>Itembans - Static reference to the item ban system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.ProjectileBans">
            <summary>ProjectileBans - Static reference to the projectile ban system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.TileBans">
            <summary>TileBans - Static reference to the tile ban system.</summary>
        </member>
        <member name="F:TShockAPI.TShock.RememberedPos">
            <summary>RememberedPos - Static reference to the remembered position manager.</summary>
        </member>
        <member name="F:TShockAPI.TShock.CharacterDB">
            <summary>CharacterDB - Static reference to the SSC character manager.</summary>
        </member>
        <member name="F:TShockAPI.TShock.ServerSideCharacterConfig">
            <summary>ServerSideCharacterConfig - Static reference to the server side character config, for accessing values set by users to modify SSC.</summary>
        </member>
        <member name="F:TShockAPI.TShock.DB">
            <summary>DB - Static reference to the database.</summary>
        </member>
        <member name="F:TShockAPI.TShock.OverridePort">
            <summary>OverridePort - Determines if TShock should override the server port.</summary>
        </member>
        <member name="F:TShockAPI.TShock.PacketBuffer">
            <summary>PacketBuffer - Static reference to the packet bufferer system, which buffers packets to clients for better performance.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Geo">
            <summary>Geo - Static reference to the GeoIP system which determines the location of an IP address.</summary>
        </member>
        <member name="F:TShockAPI.TShock.RestApi">
            <summary>RestApi - Static reference to the Rest API authentication manager.</summary>
        </member>
        <member name="F:TShockAPI.TShock.RestManager">
            <summary>RestManager - Static reference to the Rest API manager.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Utils">
            <summary>Utils - Static reference to the utilities class, which contains a variety of utility functions.</summary>
        </member>
        <member name="F:TShockAPI.TShock.StatTracker">
            <summary>StatTracker - Static reference to the stat tracker, which is created immediately when declared.</summary>
        </member>
        <member name="F:TShockAPI.TShock.UpdateManager">
            <summary>UpdateManager - Static reference to the update checker, which checks for updates and notifies server admins of updates.</summary>
        </member>
        <member name="F:TShockAPI.TShock.Log">
            <summary>Log - Static reference to the log system, which outputs to either SQL or a text file, depending on user config.</summary>
        </member>
        <member name="F:TShockAPI.TShock.instance">
            <summary>instance - Static reference to the TerrariaPlugin instance.</summary>
        </member>
        <member name="F:TShockAPI.TShock.RESTStartupTokens">
            <summary>
            Used for implementing REST Tokens prior to the REST system starting up.
            </summary>
        </member>
        <member name="M:TShockAPI.TShock.#ctor(Terraria.Main)">
            <summary>TShock - The constructor for the TShock plugin.</summary>
            <param name="game">game - The Terraria main game.</param>
        </member>
        <member name="M:TShockAPI.TShock.Initialize">
            <summary>Initialize - Called by the TerrariaServerAPI during initialization.</summary>
        </member>
        <member name="M:TShockAPI.TShock.Dispose(System.Boolean)">
            <summary>Dispose - Called when disposing.</summary>
            <param name="disposing">disposing - If set, disposes of all hooks and other systems.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnPlayerLogin(TShockAPI.Hooks.PlayerPostLoginEventArgs)">
            <summary>OnPlayerLogin - Fires the PlayerLogin hook to listening plugins.</summary>
            <param name="args">args - The PlayerPostLoginEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnAccountDelete(TShockAPI.Hooks.AccountDeleteEventArgs)">
            <summary>OnAccountDelete - Internal hook fired on account delete.</summary>
            <param name="args">args - The AccountDeleteEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnAccountCreate(TShockAPI.Hooks.AccountCreateEventArgs)">
            <summary>OnAccountCreate - Internal hook fired on account creation.</summary>
            <param name="args">args - The AccountCreateEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnPlayerPreLogin(TShockAPI.Hooks.PlayerPreLoginEventArgs)">
            <summary>OnPlayerPreLogin - Internal hook fired when on player pre login.</summary>
            <param name="args">args - The PlayerPreLoginEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.NetHooks_NameCollision(TerrariaApi.Server.NameCollisionEventArgs)">
            <summary>NetHooks_NameCollision - Internal hook fired when a name collision happens.</summary>
            <param name="args">args - The NameCollisionEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnXmasCheck(TerrariaApi.Server.ChristmasCheckEventArgs)">
            <summary>OnXmasCheck - Internal hook fired when the XMasCheck happens.</summary>
            <param name="args">args - The ChristmasCheckEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnHalloweenCheck(TerrariaApi.Server.HalloweenCheckEventArgs)">
            <summary>OnHalloweenCheck - Internal hook fired when the HalloweenCheck happens.</summary>
            <param name="args">args - The HalloweenCheckEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handles exceptions that we didn't catch earlier in the code, or in Terraria.
            </summary>
            <param name="sender">sender - The object that sent the exception.</param>
            <param name="e">e - The UnhandledExceptionEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.HandleCommandLine(System.String[])">
            <summary>HandleCommandLine - Handles the command line parameters passed to the server.</summary>
            <param name="parms">parms - The array of arguments passed in through the command line.</param>
        </member>
        <member name="M:TShockAPI.TShock.HandleCommandLinePostConfigLoad(System.String[])">
            <summary>HandleCommandLinePostConfigLoad - Handles additional command line options after the config file is read.</summary>
            <param name="parms">parms - The array of arguments passed in through the command line.</param>
        </member>
        <member name="F:TShockAPI.TShock.AuthToken">
            <summary>AuthToken - The auth token used by the /auth system to grant temporary superadmin access to new admins.</summary>
        </member>
        <member name="M:TShockAPI.TShock.OnPostInit(System.EventArgs)">
            <summary>OnPostInit - Fired when the server loads a map, to perform world specific operations.</summary>
            <param name="args">args - The EventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.ComputeMaxStyles">
            <summary>ComputeMaxStyles - Computes the max styles...</summary>
        </member>
        <member name="M:TShockAPI.TShock.FixChestStacks">
            <summary>FixChestStacks - Verifies that each stack in each chest is valid and not over the max stack count.</summary>
        </member>
        <member name="F:TShockAPI.TShock.LastCheck">
            <summary>LastCheck - Used to keep track of the last check for basically all time based checks.</summary>
        </member>
        <member name="F:TShockAPI.TShock.LastSave">
            <summary>LastSave - Used to keep track of SSC save intervals.</summary>
        </member>
        <member name="M:TShockAPI.TShock.OnUpdate(System.EventArgs)">
            <summary>OnUpdate - Called when ever the server ticks.</summary>
            <param name="args">args - EventArgs args</param>
        </member>
        <member name="M:TShockAPI.TShock.OnSecondUpdate">
            <summary>OnSecondUpdate - Called effectively every second for all time based checks.</summary>
        </member>
        <member name="M:TShockAPI.TShock.SetConsoleTitle(System.Boolean)">
            <summary>SetConsoleTitle - Updates the console title with some pertinent information.</summary>
            <param name="empty">empty - True/false if the server is empty; determines if we should use Utils.ActivePlayers() for player count or 0.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnHardUpdate(TerrariaApi.Server.HardmodeTileUpdateEventArgs)">
            <summary>OnHardUpdate - Fired when a hardmode tile update event happens.</summary>
            <param name="args">args - The HardmodeTileUpdateEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnStatueSpawn(TerrariaApi.Server.StatueSpawnEventArgs)">
            <summary>OnStatueSpawn - Fired when a statue spawns.</summary>
            <param name="args">args - The StatueSpawnEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnConnect(TerrariaApi.Server.ConnectEventArgs)">
            <summary>OnConnect - Fired when a player connects to the server.</summary>
            <param name="args">args - The ConnectEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnJoin(TerrariaApi.Server.JoinEventArgs)">
            <summary>OnJoin - Internal hook called when a player joins. This is called after OnConnect.</summary>
            <param name="args">args - The JoinEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnLeave(TerrariaApi.Server.LeaveEventArgs)">
            <summary>OnLeave - Called when a player leaves the server.</summary>
            <param name="args">args - The LeaveEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnChat(TerrariaApi.Server.ServerChatEventArgs)">
            <summary>OnChat - Fired when a player chats. Used for handling chat and commands.</summary>
            <param name="args">args - The ServerChatEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.ServerHooks_OnCommand(TerrariaApi.Server.CommandEventArgs)">
            <summary>
            Called when a command is issued from the server console.
            </summary>
            <param name="args">The CommandEventArgs object</param>
        </member>
        <member name="M:TShockAPI.TShock.OnGetData(TerrariaApi.Server.GetDataEventArgs)">
            <summary>OnGetData - Called when the server gets raw data packets.</summary>
            <param name="e">e - The GetDataEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnGreetPlayer(TerrariaApi.Server.GreetPlayerEventArgs)">
            <summary>OnGreetPlayer - Fired when a player is greeted by the server. Handles things like the MOTD, join messages, etc.</summary>
            <param name="args">args - The GreetPlayerEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.NpcHooks_OnStrikeNpc(TerrariaApi.Server.NpcStrikeEventArgs)">
            <summary>NpcHooks_OnStrikeNpc - Fired when an NPC strike packet happens.</summary>
            <param name="e">e - The NpcStrikeEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnProjectileSetDefaults(TerrariaApi.Server.SetDefaultsEventArgs{Terraria.Projectile,System.Int32})">
            <summary>OnProjectileSetDefaults - Called when a projectile sets the default attributes for itself.</summary>
            <param name="e">e - The SetDefaultsEventArgs object praameterized with Projectile and int.</param>
        </member>
        <member name="M:TShockAPI.TShock.SendBytes(Terraria.ServerSock,System.Byte[])">
            <summary>
            Send bytes to client using packetbuffering if available
            </summary>
            <param name="client">socket to send to</param>
            <param name="bytes">bytes to send</param>
            <returns>False on exception</returns>
        </member>
        <member name="M:TShockAPI.TShock.SendBytesBufferless(Terraria.ServerSock,System.Byte[])">
            <summary>
            Send bytes to a client ignoring the packet buffer
            </summary>
            <param name="client">socket to send to</param>
            <param name="bytes">bytes to send</param>
            <returns>False on exception</returns>
        </member>
        <member name="M:TShockAPI.TShock.NetHooks_SendData(TerrariaApi.Server.SendDataEventArgs)">
            <summary>NetHooks_SendData - Fired when the server sends data.</summary>
            <param name="e">e - The SendDataEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.OnStartHardMode(System.ComponentModel.HandledEventArgs)">
            <summary>OnStartHardMode - Fired when hard mode is started.</summary>
            <param name="e">e - The HandledEventArgs object.</param>
        </member>
        <member name="M:TShockAPI.TShock.StartInvasion(System.Int32)">
            <summary>StartInvasion - Starts an invasion on the server.</summary>
            <param name="type">type - The invasion type id.</param>
        </member>
        <member name="F:TShockAPI.TShock.KillCount">
            <summary>KillCount - Invasion kill count local storage variable.</summary>
        </member>
        <member name="M:TShockAPI.TShock.IncrementKills">
            <summary>IncrementKills - Increments the number of kills used in invasion tracking.</summary>
        </member>
        <member name="M:TShockAPI.TShock.CheckProjectilePermission(TShockAPI.TSPlayer,System.Int32,System.Int32)">
            <summary>CheckProjectilePermission - Checks if a projectile is banned.</summary>
            <param name="player">player - The TSPlayer object that created the projectile.</param>
            <param name="index">index - The projectile index.</param>
            <param name="type">type - The projectile type.</param>
            <returns>bool - True if the player does not have permission to use a projectile.</returns>
        </member>
        <member name="M:TShockAPI.TShock.CheckRangePermission(TShockAPI.TSPlayer,System.Int32,System.Int32,System.Int32)">
            <summary>CheckRangePermission - Checks if a player has permission to modify a tile dependent on range checks.</summary>
            <param name="player">player - The TSPlayer object.</param>
            <param name="x">x - The x coordinate of the tile.</param>
            <param name="y">y - The y coordinate of the tile.</param>
            <param name="range">range - The range to check for.</param>
            <returns>bool - True if the player should not be able to place the tile. False if they can, or if range checks are off.</returns>
        </member>
        <member name="M:TShockAPI.TShock.CheckTilePermission(TShockAPI.TSPlayer,System.Int32,System.Int32,System.Int16,TShockAPI.GetDataHandlers.EditAction)">
            <summary>CheckTilePermission - Checks to see if a player has permission to modify a tile in general.</summary>
            <param name="player">player - The TSPlayer object.</param>
            <param name="tileX">tileX - The x coordinate of the tile.</param>
            <param name="tileY">tileY - The y coordinate of the tile.</param>
            <param name="tileType">tileType - The tile type.</param>
            <param name="actionType">actionType - The type of edit that took place.</param>
            <returns>bool - True if the player should not be able to modify a tile.</returns>
        </member>
        <member name="M:TShockAPI.TShock.CheckTilePermission(TShockAPI.TSPlayer,System.Int32,System.Int32,System.Boolean)">
            <summary>CheckTilePermission - Checks to see if a player has the ability to modify a tile at a given position.</summary>
            <param name="player">player - The TSPlayer object.</param>
            <param name="tileX">tileX - The x coordinate of the tile.</param>
            <param name="tileY">tileY - The y coordinate of the tile.</param>
            <param name="paint">paint - Whether or not the tile is paint.</param>
            <returns>bool - True if the player should not be able to modify a the tile.</returns>
        </member>
        <member name="M:TShockAPI.TShock.CheckSpawn(System.Int32,System.Int32)">
            <summary>CheckSpawn - Checks to see if a location is inside the spawn protection zone.</summary>
            <param name="x">x - The x coordinate to check.</param>
            <param name="y">y - The y coordinate to check.</param>
            <returns>bool - True if the location is inside the spawn protection zone.</returns>
        </member>
        <member name="M:TShockAPI.TShock.Distance(Vector2,Vector2)">
            <summary>Distance - Determines the distance between two vectors.</summary>
            <param name="value1">value1 - The first vector location.</param>
            <param name="value2">value2 - The second vector location.</param>
            <returns>float - The distance between the two vectors.</returns>
        </member>
        <member name="M:TShockAPI.TShock.HackedInventory(TShockAPI.TSPlayer)">
            <summary>HackedInventory - Checks to see if a user has a hacked inventory. In addition, messages players the result.</summary>
            <param name="player">player - The TSPlayer object.</param>
            <returns>bool - True if the player has a hacked inventory.</returns>
        </member>
        <member name="M:TShockAPI.TShock.CheckIgnores(TShockAPI.TSPlayer)">
            <summary>CheckIgnores - Checks a players ignores...?</summary>
            <param name="player">player - The TSPlayer object.</param>
            <returns>bool - True if any ignore is not none, false, or login state differs from the required state.</returns>
        </member>
        <member name="M:TShockAPI.TShock.OnConfigRead(TShockAPI.ConfigFile)">
            <summary>OnConfigRead - Fired when the config file has been read.</summary>
            <param name="file">file - The config file object.</param>
        </member>
        <member name="P:TShockAPI.TShock.Config">
            <summary>Config - Static reference to the config system, for accessing values set in users' config files.</summary>
        </member>
        <member name="E:TShockAPI.TShock.Initialized">
            <summary>
            Called after TShock is initialized. Useful for plugins that needs hooks before tshock but also depend on tshock being loaded.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TShockAPI.TShock.Version" -->
        <member name="P:TShockAPI.TShock.Name">
            <summary>Name - The plugin name.</summary>
            <value>value - "TShock"</value>
        </member>
        <member name="P:TShockAPI.TShock.Author">
            <summary>Author - The author of the plugin.</summary>
            <value>value - "The TShock Team"</value>
        </member>
        <member name="P:TShockAPI.TShock.Description">
            <summary>Description - The plugin description.</summary>
            <value>value - "The administration modification of the future."</value>
        </member>
        <member name="F:TShockAPI.TSPlayer.Server">
            <summary>
            This represents the server as a player.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.All">
            <summary>
            This player represents all the players.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RecentFuse">
            <summary>
            A timer to keep track of whether or not the player has recently thrown an explosive
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RPPending">
            <summary>
            A system to delay Remembered Position Teleports a few seconds
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.tempGroup">
            <summary>
            The player's temporary group.  This overrides the user's actual group.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LastPvPTeamChange">
            <summary>
            The last time the player changed their team or pvp status.  
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.TempPoints">
            <summary>
            Temp points for use in regions and other plugins.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.AwaitingResponse">
            <summary>
            A list of command callbacks indexed by the command they need to do.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.DisplayLogs">
            <summary>
            Whether the player should see logs.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LastWhisper">
            <summary>
            The last player that the player whispered with (to or from).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.IsLoggedIn">
            <summary>
            Whether the player is logged in or not.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.UserID">
            <summary>
            The player's user id( from the db ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.HasBeenNaggedAboutLoggingIn">
            <summary>
            Whether the player has been nagged about logging in.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.mute">
            <summary>
            Whether the player is muted or not.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RespawnTimer">
            <summary>
            The player's respawn timer.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.Dead">
            <summary>
            Whether the player is dead or not.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.Difficulty">
            <summary>
            The players difficulty( normal[softcore], mediumcore, hardcore ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.PlayerData">
            <summary>
            The player's server side inventory data.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RequiresPassword">
            <summary>
            Whether the player needs to specify a password upon connection( either server or user account ).
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.IceTiles">
            <summary>
            A list of points where ice tiles have been placed.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.RPm">
            <summary>
            Unused, can be removed.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.WPm">
            <summary>
            World protection message cool down.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.SPm">
            <summary>
            Spawn protection message cool down.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.BPm">
            <summary>
            Permission to build message cool down.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LoginMS">
            <summary>
            The time in ms when the player has logged in.  
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LoginHarassed">
            <summary>
            Whether the player has been harrassed about logging in due to server side inventory or forced login.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.GodMode">
            <summary>
            Player cant die, unless onehit
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.Confused">
            <summary>
            Players controls are inverted if using SSC
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.LastKilledProjectile">
            <summary>
            The last projectile type this player tried to kill.
            </summary>
        </member>
        <member name="F:TShockAPI.TSPlayer.CurrentRegion">
            <summary>
            The current region this player is in, or null if none.
            </summary>
        </member>
        <member name="M:TShockAPI.TSPlayer.SaveServerCharacter">
            <summary>
            Saves the player's inventory to SSI
            </summary>
            <returns>bool - True/false if it saved successfully</returns>
        </member>
        <member name="M:TShockAPI.TSPlayer.SendServerCharacter">
            <summary>
            Sends the players server side character to client
            </summary>
            <returns>bool - True/false if it saved successfully</returns>
        </member>
        <member name="M:TShockAPI.TSPlayer.AddResponse(System.String,System.Action{System.Object})">
            <summary>
            Adds a command callback to a specified command string.
            </summary>
            <param name="name">The string representing the command i.e "yes" == /yes</param>
            <param name="callback">The method that will be executed on confirmation ie user accepts</param>
        </member>
        <member name="P:TShockAPI.TSPlayer.TileKillThreshold">
            <summary>
            The amount of tiles that the player has killed in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TilePlaceThreshold">
            <summary>
            The amount of tiles the player has placed in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TileLiquidThreshold">
            <summary>
            The amount of liquid (in tiles) that the player has placed in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.PaintThreshold">
            <summary>
            The amount of tiles that the player has painted in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.ProjectileThreshold">
            <summary>
            The number of projectiles created by the player in the last second.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.IgnoreSSCPackets">
            <summary>
            Whether to ignore packets that are SSC-relevant.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TilesDestroyed">
            <summary>
            A queue of tiles destroyed by the player for reverting.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TilesCreated">
            <summary>
            A queue of tiles placed by the player for reverting.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.Group">
            <summary>
            The player's group.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.Index">
            <summary>
            The players index in the player array( Main.players[] ).
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.AwaitingTempPoint">
            <summary>
            Whether the player is waiting to place/break a tile to set as a temp point.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LastThreat">
            <summary>
            The last time a player broke a grief check.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LoginAttempts">
            <summary>
            The number of unsuccessful login attempts.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.UserAccountName">
            <summary>
            The player's login name.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.LoginFailsBySsi">
            <summary>
            Whether the player performed a valid login attempt (i.e. entered valid user name and password) but is still blocked
            from logging in because of SSI.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.HasSentInventory">
            <summary>
            Whether the player has sent their whole inventory to the server while connecting.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.RealPlayer">
            <summary>
            Whether the player is a real, human, player on the server.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.SelectedItem">
            <summary>
            Gets the player's selected item.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.UUID">
            <summary>
            Gets the player's UUID.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.IP">
            <summary>
            Gets the player's IP.
            </summary>
        </member>
        <member name="P:TShockAPI.TSPlayer.TPlayer">
            <summary>
            Terraria Player
            </summary>
        </member>
        <member name="F:TShockAPI.UpdateManager.CheckXMinutes">
            <summary>
            Check once every X minutes.
            </summary>
        </member>
        <member name="M:TShockAPI.UpdateManager.ServerIsOutOfDate">
            <summary>
            Checks to see if the server is out of date.
            </summary>
            <returns></returns>
        </member>
        <member name="F:TShockAPI.DB.WarpManager.Warps">
            <summary>
            The list of warps.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a warp.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="name">The name.</param>
            <returns>Whether the opration succeeded.</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.ReloadWarps">
            <summary>
            Reloads all warps.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.Remove(System.String)">
            <summary>
            Removes a warp.
            </summary>
            <param name="warpName">The warp name.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.Find(System.String)">
            <summary>
            Finds the warp with the given name.
            </summary>
            <param name="warpName">The name.</param>
            <returns>The warp, if it exists, or else null.</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.FindWarp(System.String)">
            <summary>
            Finds the warp with the given name.
            </summary>
            <param name="warpName">The name.</param>
            <returns>The warp, if it exists, or else null.</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.Position(System.String,System.Int32,System.Int32)">
            <summary>
            Sets the position of a warp.
            </summary>
            <param name="warpName">The warp name.</param>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <returns>Whether the operation suceeded.</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.Hide(System.String,System.Boolean)">
            <summary>
            Sets the hidden state of a warp.
            </summary>
            <param name="warpName">The warp name.</param>
            <param name="state">The state.</param>
            <returns>Whether the operation suceeded.</returns>
        </member>
        <member name="T:TShockAPI.DB.Warp">
            <summary>
            Represents a warp.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.Warp.#ctor">
            <summary>Creates a warp with a default coordinate of zero, an empty name, public.</summary>
        </member>
        <member name="P:TShockAPI.DB.Warp.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:TShockAPI.DB.Warp.IsPrivate">
            <summary>
            Gets or sets the warp's privacy state.
            </summary>
        </member>
        <member name="P:TShockAPI.DB.Warp.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:TShockAPI.DB.Warp.WarpPos">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
    </members>
</doc>
